Index: Game_Start.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport random\r\nfrom constants import LABELS, Frases, SCREENSIZE, WIDTH, HEIGHT\r\n# проверка связи\r\npygame.init()\r\nscreen = pygame.display.set_mode(SCREENSIZE)  # , pygame.FULLSCREEN\r\nclock = pygame.time.Clock()\r\npygame.display.set_caption('Super Game')\r\n\r\n\r\ndef load_image(name):\r\n    return pygame.image.load('data/' + name)\r\n\r\n\r\n# def music(name, volume=1):\r\n#     if name[-3:] == 'mp3':\r\n#         pygame.mixer.music.load('data/' + name)\r\n#         pygame.mixer.music.play()\r\n#         pygame.mixer.music.set_volume(volume)\r\n#     elif name[-3:] == 'ogg' or name[-3:] == 'wav':\r\n#         return pygame.mixer.Sound('data/' + name)\r\n#     else:\r\n#         print('error sound')\r\n\r\n\r\ndef static_labels():\r\n    font = pygame.font.Font(None, 25)\r\n    screen.blit(font.render(LABELS[0], 1, (255, 255, 255), (0, 0, 0)), (450, 100))\r\n    pygame.draw.rect(screen, (123, 0, 123), (435, 90, 150, 30), 1)\r\n    screen.blit(font.render(LABELS[1], 1, (255, 255, 255), (0, 0, 0)), (100 + xl, 150 + yl))\r\n    pygame.draw.rect(screen, (123, 0, 123), (90 + xl, 140 + yl, 130, 30), 1)\r\n    if save:\r\n        screen.blit(font.render(LABELS[2], 1, (255, 255, 255), (0, 0, 0)), (100 + xl, 200 + yl))\r\n        pygame.draw.rect(screen, (123, 0, 123), (90 + xl, 190 + yl, 130, 30), 1)\r\n    else:\r\n        screen.blit(font.render(LABELS[2], 1, (100, 100, 100), (0, 0, 0)), (100 + xl, 200 + yl))\r\n        pygame.draw.rect(screen, (123, 0, 123), (90 + xl, 190 + yl, 130, 30), 1)\r\n    screen.blit(font.render(LABELS[3], 1, (255, 255, 255), (0, 0, 0)), (100 + xl, 250 + yl))\r\n    pygame.draw.rect(screen, (123, 0, 123), (90 + xl, 240 + yl, 130, 30), 1)\r\n    screen.blit(font.render(LABELS[4], 1, (255, 255, 255), (0, 0, 0)), (100 + xl, 300 + yl))\r\n    pygame.draw.rect(screen, (123, 0, 123), (90 + xl, 290 + yl, 130, 30), 1)\r\n    screen.blit(font.render(LABELS[5], 1, (255, 255, 255), (0, 0, 0)), (100 + xl, 350 + yl))\r\n    pygame.draw.rect(screen, (123, 0, 123), (90 + xl, 340 + yl, 130, 30), 1)\r\n\r\n\r\ndef Saves(save='r'):\r\n    global K, Flag, dialog, menu\r\n    saves = open(\"saves.txt\", save)\r\n    if save == 'r':\r\n        s = saves.readlines()\r\n        if s == []:\r\n            return False\r\n        else:\r\n            K, Flag, dialog, menu = int(s[0].split()[0]), *[bool(int(i)) for i in s[0].split()[1:]]\r\n            return True\r\n    if save == 'w':\r\n        saves.write(str(K) + ' ' + str(int(Flag)) + ' ' + str(int(dialog)) + ' ' + str(int(menu)))\r\n\r\n\r\nscreen_rect = (0, 0, WIDTH, HEIGHT)\r\n\r\n\r\nclass FireBall(pygame.sprite.Sprite):\r\n    \"\"\"Фаерболлы. Что умеют:\r\n    при попадании во врага убивают его и исчезают\"\"\"\r\n    g = load_image(\"fireball.png\").convert()\r\n    image = pygame.transform.scale(g, (20, 20))\r\n\r\n    def __init__(self, x, y, vector, *groups):\r\n        super().__init__(*groups)\r\n        self.image = self.image\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n        self.v = 20\r\n        self.vector = vector\r\n\r\n    def update(self, *args):\r\n        if pygame.sprite.spritecollideany(self, enemy_group):\r\n            self.kill()\r\n        if not self.rect.colliderect(screen_rect):\r\n            self.kill()\r\n        else:\r\n            if self.vector == 1:\r\n                self.rect.x += self.v\r\n            if self.vector == 2:\r\n                self.rect.x -= self.v\r\n            if self.vector == 3:\r\n                self.rect.y -= self.v\r\n            if self.vector == 4:\r\n                self.rect.y += self.v\r\n\r\n\r\nclass Enemy(pygame.sprite.Sprite):\r\n    \"\"\"Класс врагов. Что умеют:\r\n    1.умирать от попадания фаерболла,\r\n    2.бегать за героем если он находится в радиусе видимости\"\"\"\r\n\r\n    def __init__(self, sheet, columns, rows, *groups):\r\n        super().__init__(*groups)\r\n        # скорость врага\r\n        self.v = 0\r\n        self.frames_right = []\r\n        self.frames_left = []\r\n        self.frames_up = []\r\n        self.frames_down = []\r\n        self.cut_sheet(sheet, columns, rows)\r\n        self.cur_frame = 0\r\n        self.image = self.frames_right[self.cur_frame]\r\n        self.rect = self.image.get_rect()\r\n        while True:\r\n            rand_x = random.randint(0, floor.mask.get_size()[0])\r\n            rand_y = random.randint(0, floor.mask.get_size()[1])\r\n            if floor.mask.get_at((rand_x, rand_y)) == 1:\r\n                break\r\n        self.rect.x = rand_x\r\n        self.rect.y = rand_y\r\n\r\n        self.vector = 1\r\n        self.frame_count = 0\r\n        self.health = 10\r\n        self.damage = 0.2\r\n        # проверка на застой\r\n        self.stand = True\r\n\r\n    def cut_sheet(self, sheet, columns, rows):\r\n        self.rect = pygame.Rect(0, 0, sheet.get_width() // columns,\r\n                                sheet.get_height() // rows)\r\n\r\n        for j in range(rows):\r\n            for i in range(columns):\r\n                frame_location = (self.rect.w * i, self.rect.h * j)\r\n                if j == 0:\r\n                    self.frames_up.append(sheet.subsurface(pygame.Rect(\r\n                        frame_location, self.rect.size)))\r\n                elif j == 1:\r\n                    self.frames_right.append(sheet.subsurface(pygame.Rect(\r\n                        frame_location, self.rect.size)))\r\n                elif j == 2:\r\n                    self.frames_down.append(sheet.subsurface(pygame.Rect(\r\n                        frame_location, self.rect.size)))\r\n                elif j == 3:\r\n                    self.frames_left.append(sheet.subsurface(pygame.Rect(\r\n                        frame_location, self.rect.size)))\r\n\r\n    def update(self, *args):\r\n        # при попадании фаерболаа враг умирает\r\n        for elem in fireballs:\r\n            if self.rect.colliderect(elem):\r\n                self.health -= 5\r\n                elem.kill()\r\n                if self.health <= 0:\r\n                    self.kill()\r\n\r\n        # наносим урон герою\r\n        if self.rect.colliderect(hero):\r\n            hero.change_health(-self.damage)\r\n\r\n        # движение врагов\r\n        if ((self.rect.x - hero.rect.x) ** 2 + (self.rect.y - hero.rect.y) ** 2) < 400**2 and not self.rect.colliderect(\r\n                hero):\r\n            self.v = 3\r\n            # задаем 4 возможных направления передвижений зомби\r\n            x1 = {\"distance\": (self.rect.x + self.v - hero.rect.x) ** 2 + (self.rect.y - hero.rect.y) ** 2,\r\n                  \"vector\": 1,\r\n                  \"dx\": self.v,\r\n                  \"dy\": 0}\r\n            x2 = {\"distance\": (self.rect.x - self.v - hero.rect.x) ** 2 + (self.rect.y - hero.rect.y) ** 2,\r\n                  \"vector\": 2,\r\n                  \"dx\": -self.v,\r\n                  \"dy\": 0}\r\n            y1 = {\"distance\": (self.rect.y + self.v - hero.rect.y) ** 2 + (self.rect.x - hero.rect.x) ** 2,\r\n                  \"vector\": 3,\r\n                  \"dx\": 0,\r\n                  \"dy\": self.v}\r\n            y2 = {\"distance\": (self.rect.y - self.v - hero.rect.y) ** 2 + (self.rect.x - hero.rect.x) ** 2,\r\n                  \"vector\": 4,\r\n                  \"dx\": 0,\r\n                  \"dy\": -self.v}\r\n\r\n            ways = [x1, x2, y1, y2]\r\n\r\n            def optimal_way(ar):\r\n                # выбираем путь наименьшей длины\r\n                ok = min(ar, key=lambda i: i[\"distance\"])\r\n                self.rect.x += ok[\"dx\"]\r\n                self.rect.y += ok[\"dy\"]\r\n                if pygame.sprite.collide_mask(self, walls): # проверяем его на пригодность\r\n                    # если зомби зомби пересек спрайт стены, то отменяем действие\r\n                    self.rect.x -= ok[\"dx\"]\r\n                    self.rect.y -= ok[\"dy\"]\r\n                    # ищем другое допустимое перемещение\r\n                    ways = [elem for elem in ar if elem != ok]\r\n                    if ways:\r\n                        optimal_way(ways)\r\n                    else:\r\n                        return\r\n\r\n                else:\r\n                    # выходим из рекурсии, когда такое перемещение найдено\r\n                    self.vector = ok[\"vector\"]\r\n                    self.stand = False\r\n                    return\r\n\r\n            optimal_way(ways)\r\n\r\n\r\n        # обновляем картинки зомби\r\n        if self.frame_count % 5 == 0 and not self.stand:\r\n            self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)\r\n            if self.vector == 1:\r\n                self.image = self.frames_right[self.cur_frame]\r\n            elif self.vector == 2:\r\n                self.image = self.frames_left[self.cur_frame]\r\n            elif self.vector == 3:\r\n                self.image = self.frames_down[self.cur_frame]\r\n            elif self.vector == 4:\r\n                self.image = self.frames_up[self.cur_frame]\r\n        self.frame_count += 1\r\n        # отрисовываем полоску здоровья\r\n        pygame.draw.rect(screen, (255, 0, 0), (self.rect.x, self.rect.y, 5 * int(self.health), 5))\r\n\r\n        self.stand = True\r\n\r\n\r\nclass MainHero(pygame.sprite.Sprite):\r\n    \"\"\"Класс главного героя. Что умеет:\r\n    1. бегает\r\n    2. стреляет фаерболлами\r\n    to-do\r\n    3. анимация ближнего боя\"\"\"\r\n    image = load_image(\"hero.png\")\r\n\r\n    def __init__(self, frames_right, frames_left, frames_stand_left, frames_stand_right, frames_left_shouting,frames_right_shouting, start_pos, *groups):\r\n        super().__init__(*groups)\r\n        self.frames_right = frames_right\r\n        self.frames_left = frames_left\r\n        self.frames_stand_left = frames_stand_left\r\n        self.frames_stand_right = frames_stand_right\r\n        self.frames_right_shouting = frames_right_shouting\r\n        self.frames_left_shouting = frames_left_shouting\r\n        self.cur_frame = 0\r\n        self.frame_count = 0\r\n        self.image = self.frames_right[self.cur_frame]\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = start_pos[0]\r\n        self.rect.y = start_pos[1]\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        #self.mask = pygame.mask.from_surface(pygame.Surface((self.rect.width, self.rect.height), pygame.SRCALPHA))\r\n        #self.mask = self.rect\r\n        self.vector = 1\r\n        # скорость гг\r\n        self.v = 5\r\n        self.vector_left_right = 1\r\n        self.vector_stand = 1\r\n        self.health = 100\r\n        # проверка на остановку\r\n        self.stand = True\r\n        # чтобы перс не застрявал в верхних стенах\r\n        self.in_wall_prison = False\r\n        # проверка на стрельбу\r\n        self.is_shouting = False\r\n\r\n    def update(self, *args):\r\n        buttons = pygame.key.get_pressed()\r\n        pygame.draw.rect(screen, (255, 0, 0), (WIDTH - 130, 20, int(hero.health), 10))\r\n<<<<<<< HEAD\r\n        if buttons[pygame.K_SPACE]:\r\n            self.is_shouting = True\r\n        else:\r\n            self.is_shouting = False\r\n        if buttons[pygame.K_UP]:  # and not pygame.sprite.collide_mask(self, walls):\r\n=======\r\n        if buttons[pygame.K_UP]:\r\n>>>>>>> 42b83b66d7583c74ab2a65174e17c83e512c3fb5\r\n            self.vector = 3\r\n            self.rect.y -= self.v\r\n            if  pygame.sprite.collide_mask(self, walls):\r\n                self.rect.y += self.v\r\n            else:\r\n                self.stand = False\r\n\r\n        if buttons[pygame.K_DOWN]:\r\n            self.vector = 4\r\n            self.rect.y += self.v\r\n            if pygame.sprite.collide_mask(self, walls):\r\n                self.rect.y -= self.v\r\n            else:\r\n                self.stand = False\r\n        if buttons[pygame.K_RIGHT]:\r\n            self.vector = 1\r\n            self.vector_left_right = 1\r\n            self.rect.x += self.v\r\n            if pygame.sprite.collide_mask(self, walls):\r\n                self.rect.x -= self.v\r\n            else:\r\n                self.stand = False\r\n        if buttons[pygame.K_LEFT]:\r\n            self.vector = 2\r\n            self.vector_left_right = 2\r\n            self.rect.x -= self.v\r\n            if pygame.sprite.collide_mask(self, walls):\r\n                self.rect.x += self.v\r\n            else:\r\n                self.stand = False\r\n\r\n        if self.frame_count % 5 == 0:\r\n            if not self.is_shouting:\r\n                if not self.stand:\r\n                    if self.vector_left_right == 1:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)\r\n                        self.image = self.frames_right[self.cur_frame]\r\n                    if self.vector_left_right == 2:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_left)\r\n                        self.image = self.frames_left[self.cur_frame]\r\n                else:\r\n                    if self.vector_left_right == 1:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)\r\n                        self.image = self.frames_stand_right[self.cur_frame]\r\n                    if self.vector_left_right == 2:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_left)\r\n                        self.image = self.frames_stand_left[self.cur_frame]\r\n            else:\r\n                if not self.stand:\r\n                    if self.vector_left_right == 1:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_right_shouting)\r\n                        self.image = self.frames_right_shouting[self.cur_frame]\r\n                    if self.vector_left_right == 2:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_left_shouting)\r\n                        self.image = self.frames_left_shouting[self.cur_frame]\r\n                else:\r\n                    if self.vector_left_right == 1:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)\r\n                        self.image = self.frames_stand_right[self.cur_frame]\r\n                    if self.vector_left_right == 2:\r\n                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_left)\r\n                        self.image = self.frames_stand_left[self.cur_frame]\r\n\r\n\r\n\r\n        if not (buttons[pygame.K_UP] or buttons[pygame.K_DOWN] or buttons[pygame.K_RIGHT] or buttons[pygame.K_LEFT]):\r\n            self.stand = True\r\n        self.frame_count += 1\r\n\r\n    def fire(self):\r\n        FireBall(self.rect.x, self.rect.y, self.vector, all_sprites, fireballs)\r\n    def change_health(self, value):\r\n        self.health += value\r\n        if self.health < 0:\r\n            self.health = 0\r\n\r\n\r\nclass Walls(pygame.sprite.Sprite):\r\n    \"\"\"\"Тупо стены\"\"\"\r\n    image = load_image('стены_1.png')\r\n    image_mask = load_image('стены_1(ok).png')###???\r\n\r\n    def __init__(self, *groups):\r\n        super().__init__(*groups)\r\n        self.image = self.image\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = 0\r\n        self.rect.y = 0\r\n        self.mask = pygame.mask.from_surface(self.image_mask)\r\n\r\n    def update(self, *args):\r\n        # камон, это же стены\r\n        pass\r\n\r\n\r\nclass Floor(pygame.sprite.Sprite):\r\n    \"\"\"\"Тупо стены\"\"\"\r\n    image = load_image('фон_1.png')\r\n\r\n    def __init__(self, *groups):\r\n        super().__init__(*groups)\r\n        self.image = self.image\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = 23\r\n        self.rect.y = 45\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n\r\n    def update(self, *args):\r\n        # камон, это же пол\r\n        pass\r\n\r\n\r\nclass Camera:\r\n    # зададим начальный сдвиг камеры\r\n    def __init__(self):\r\n        self.dx = 0\r\n        self.dy = 0\r\n\r\n    # сдвинуть объект obj на смещение камеры\r\n    def apply(self, obj):\r\n        obj.rect.x += self.dx\r\n        obj.rect.y += self.dy\r\n\r\n    # позиционировать камеру на объекте target\r\n    def update(self, *args):\r\n        self.dx = -(args[0].rect.x + args[0].rect.w // 2 - WIDTH // 2)\r\n        self.dy = -(args[0].rect.y + args[0].rect.h // 2 - HEIGHT // 2)\r\n\r\n\r\ndef draw_trap():\r\n    global k\r\n    im1 = load_image('trap1.png')\r\n    im0 = load_image('trap0.png')\r\n    f = load_image('firetrap.png')\r\n    if int(str(k)[-2::]) < 50:\r\n        screen.blit(im0, (100, 100))\r\n    else:\r\n        screen.blit(im1, (100, 100))\r\n        screen.blit(f, (200, 200))\r\n    k += 1\r\n\r\n\r\ncamera = Camera()\r\n\r\nall_sprites = pygame.sprite.Group()\r\nenemy_group = pygame.sprite.Group()\r\nfireballs = pygame.sprite.Group()\r\n\r\nk = 0\r\nfps = 60\r\nK = -1\r\nxl, yl = 0, 50\r\nsave = False\r\nFlag = False\r\n# если хотим увидеть предысторию, то надо поставить значение True\r\ndialog = False\r\ngamerun = True\r\nmenu = True\r\nlvl = False\r\n#music('TownTheme.mp3')\r\nfon = load_image('фон_1.png')\r\nwalls = load_image('стены_1(new).png')\r\n# начальное положение фоновых объектов\r\nx_fon, y_fon = 23, 45\r\nx_walls, y_walls = 0, 0\r\nfuture = False\r\nis_hero = False\r\nwhile gamerun:\r\n    if dialog:\r\n        font = pygame.font.Font(None, 20)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                gamerun = False\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    if Flag is False and K < 14:\r\n                        K += 1\r\n                        Flag = True\r\n                    elif Flag is True and K < 14:\r\n                        K += 1\r\n                    else:\r\n                        Flag = False\r\n                        lvl = True\r\n                        dialog = False\r\n        screen.fill((10, 10, 10))\r\n        if Flag:\r\n            if K not in [2, 5]:\r\n                screen.blit(font.render(Frases[K], 1, (255, 0, 0), (0, 0, 0)), (0, 401))\r\n            elif K == 2:\r\n                screen.blit(font.render(Frases[K], 1, (255, 0, 0), (0, 0, 0)), (0, 401))\r\n            elif K == 5:\r\n                pass\r\n        pygame.draw.line(screen, (123, 0, 123), [0, 400], [1000, 400], 1)\r\n        pygame.display.flip()\r\n    elif menu:\r\n        screen.fill((10, 10, 10))\r\n        screen.blit(pygame.transform.scale(load_image('worldmap.png'), (WIDTH, HEIGHT)), (0, 0))\r\n        static_labels()\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                gamerun = False\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                x, y = pygame.mouse.get_pos()\r\n                if event.button == 1 and (90 < (x - xl) < 220) and (140 < (y - yl) < 170):\r\n                    # dialog = True\r\n                    lvl = True\r\n                    menu = False\r\n                if event.button == 1 and (90 < (x - xl) < 220) and (340 < (y - yl) < 370):\r\n                    Saves('w')\r\n                    gamerun = False\r\n                if event.button == 1 and (90 < (x - xl) < 220) and ((290 < (y - yl) < 320) or (240 < (y - yl) < 270)):\r\n                    future = True\r\n                    menu = False\r\n    elif lvl:\r\n        if not is_hero:\r\n            is_hero = True\r\n            floor = Floor(all_sprites)\r\n            walls = Walls(all_sprites)\r\n            hero = MainHero([load_image(\"bomzh_vprapo_okonchat0.png\"), load_image(\"bomzh_vprapo_okonchat1.png\"),\r\n                             load_image(\"bomzh_vprapo_okonchat2.png\"), load_image(\"bomzh_vprapo_okonchat3.png\"),\r\n                             load_image(\"bomzh_vprapo_okonchat4.png\"), load_image(\"bomzh_vprapo_okonchat5.png\"),\r\n                             load_image(\"bomzh_vprapo_okonchat6.png\"),\r\n                             load_image(\"bomzh_vprapo_okonchat7.png\")],\r\n                            [load_image(\"bomzh_vlevo_okonchat0.png\"), load_image(\"bomzh_vlevo_okonchat1.png\"),\r\n                             load_image(\"bomzh_vlevo_okonchat2.png\"), load_image(\"bomzh_vlevo_okonchat3.png\"),\r\n                             load_image(\"bomzh_vlevo_okonchat4.png\"), load_image(\"bomzh_vlevo_okonchat5.png\"),\r\n                             load_image(\"bomzh_vlevo_okonchat6.png\"), load_image(\"bomzh_vlevo_okonchat7.png\")],\r\n                            [load_image(\"stait_vlevo00.png\"), load_image(\"stait_vlevo01.png\"),\r\n                             load_image(\"stait_vlevo02.png\"), load_image(\"stait_vlevo03.png\"),\r\n                             load_image(\"stait_vlevo04.png\"), load_image(\"stait_vlevo14.png\"),\r\n                             load_image(\"stait_vlevo15.png\"), load_image(\"stait_vlevo16.png\"),\r\n                             load_image(\"stait_vlevo17.png\")],\r\n                            [load_image(\"stait_vpravo00.png\"), load_image(\"stait_vpravo01.png\"),\r\n                             load_image(\"stait_vpravo02.png\"), load_image(\"stait_vpravo03.png\"),\r\n                             load_image(\"stait_vpravo04.png\"), load_image(\"stait_vpravo14.png\"),\r\n                             load_image(\"stait_vpravo15.png\"), load_image(\"stait_vpravo16.png\"),\r\n                             load_image(\"stait_vpravo17.png\")],\r\n                            [load_image(\"bomzh_vlevo_shout0.png\"), load_image(\"bomzh_vlevo_shout1.png\"),\r\n                             load_image(\"bomzh_vlevo_shout2.png\"), load_image(\"bomzh_vlevo_shout3.png\"),\r\n                             load_image(\"bomzh_vlevo_shout4.png\"), load_image(\"bomzh_vlevo_shout5.png\"),\r\n                             load_image(\"bomzh_vlevo_shout6.png\"), load_image(\"bomzh_vlevo_shout7.png\")],\r\n                            [load_image(\"bomzh_vprapo_shout0.png\"), load_image(\"bomzh_vprapo_shout1.png\"),\r\n                             load_image(\"bomzh_vprapo_shout2.png\"), load_image(\"bomzh_vprapo_shout3.png\"),\r\n                             load_image(\"bomzh_vprapo_shout4.png\"), load_image(\"bomzh_vprapo_shout5.png\"),\r\n                             load_image(\"bomzh_vprapo_shout6.png\"),\r\n                             load_image(\"bomzh_vprapo_shout7.png\")], (800, 300),\r\n                            all_sprites)\r\n            for i in range(5):\r\n                Enemy(load_image(\"bloody_zombie-NESW.png\"), 3, 4, all_sprites, enemy_group)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                lvl = False\r\n                gamerun = False\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_SPACE:\r\n                    hero.fire()\r\n\r\n        screen.fill((0, 0, 0))\r\n        camera.update(hero)\r\n        for sprite in all_sprites:\r\n            camera.apply(sprite)\r\n        all_sprites.draw(screen)\r\n        all_sprites.update(event)\r\n\r\n    elif future:\r\n        screen.fill((0, 0, 0))\r\n        font = pygame.font.Font(None, 25)\r\n        screen.blit(font.render('Эта опция появится в будущих версиях.', 1, (255, 0, 0), (0, 0, 0)), (100, 100))\r\n        screen.blit(font.render('Вернуться в меню.', 1, (255, 0, 0), (0, 0, 0)), (420, 410))\r\n        pygame.draw.rect(screen, (123, 0, 123), (400, 400, 200, 30), 1)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                x, y = pygame.mouse.get_pos()\r\n                if event.button == 1 and (400 < x < 600) and (400 < y < 430):\r\n                    future = False\r\n                    menu = True\r\n    pygame.display.update()\r\n    pygame.display.flip()\r\n    clock.tick(fps)\r\npygame.quit()\r\n#############
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Game_Start.py	(revision d5d33e662c22c5c2f9af1cc3a19b942278adbf2a)
+++ Game_Start.py	(date 1607592152025)
@@ -6,6 +6,10 @@
 screen = pygame.display.set_mode(SCREENSIZE)  # , pygame.FULLSCREEN
 clock = pygame.time.Clock()
 pygame.display.set_caption('Super Game')
+manna_upper_coordinates = [(804, 310),(-73, 500)]
+health_upper_coordinates = [(1720, 260)]
+manna_upper_real_coordinates = [(410,250),(-430, 447)]
+health_upper_real_coordinates = [(1312,187)]
 
 
 def load_image(name):
@@ -63,8 +67,7 @@
 class FireBall(pygame.sprite.Sprite):
     """Фаерболлы. Что умеют:
     при попадании во врага убивают его и исчезают"""
-    g = load_image("fireball.png").convert()
-    image = pygame.transform.scale(g, (20, 20))
+    image = pygame.transform.scale(load_image("fireball_new.png"), (20, 20))
 
     def __init__(self, x, y, vector, *groups):
         super().__init__(*groups)
@@ -151,6 +154,7 @@
                 elem.kill()
                 if self.health <= 0:
                     self.kill()
+                    hero.gold += 5
 
         # наносим урон герою
         if self.rect.colliderect(hero):
@@ -226,25 +230,31 @@
 class MainHero(pygame.sprite.Sprite):
     """Класс главного героя. Что умеет:
     1. бегает
-    2. стреляет фаерболлами
-    to-do
-    3. анимация ближнего боя"""
+    2. стреляет фаерболлами"""
     image = load_image("hero.png")
 
-    def __init__(self, frames_right, frames_left, frames_stand_left, frames_stand_right, frames_left_shouting,frames_right_shouting, start_pos, *groups):
+    def __init__(self, frames_right, frames_left, frames_stand_left, frames_stand_right, frames_left_shouting,frames_right_shouting, frames_left_kicking,frames_right_kicking, frames_stand_left_shouting, frames_stand_right_shouting, frames_stand_left_kick, frames_stand_right_kick, start_pos, *groups):
         super().__init__(*groups)
         self.frames_right = frames_right
         self.frames_left = frames_left
         self.frames_stand_left = frames_stand_left
+        self.frames_stand_right_shouting = frames_stand_right_shouting
+        self.frames_stand_left_shouting = frames_stand_left_shouting
+        self.frames_stand_right_kick = frames_stand_right_kick
+        self.frames_stand_left_kick = frames_stand_left_kick
         self.frames_stand_right = frames_stand_right
         self.frames_right_shouting = frames_right_shouting
         self.frames_left_shouting = frames_left_shouting
+        self.frames_right_kicking = frames_right_kicking
+        self.frames_left_kicking = frames_left_kicking
         self.cur_frame = 0
         self.frame_count = 0
+        self.gold = 0
         self.image = self.frames_right[self.cur_frame]
         self.rect = self.image.get_rect()
         self.rect.x = start_pos[0]
         self.rect.y = start_pos[1]
+        self.realx = self.realy = 0
         self.mask = pygame.mask.from_surface(self.image)
         #self.mask = pygame.mask.from_surface(pygame.Surface((self.rect.width, self.rect.height), pygame.SRCALPHA))
         #self.mask = self.rect
@@ -254,25 +264,29 @@
         self.vector_left_right = 1
         self.vector_stand = 1
         self.health = 100
+        self.manna = 100
         # проверка на остановку
         self.stand = True
         # чтобы перс не застрявал в верхних стенах
         self.in_wall_prison = False
         # проверка на стрельбу
         self.is_shouting = False
+        #проверка на рукопашку
+        self.is_kicking = False
 
     def update(self, *args):
         buttons = pygame.key.get_pressed()
         pygame.draw.rect(screen, (255, 0, 0), (WIDTH - 130, 20, int(hero.health), 10))
-<<<<<<< HEAD
-        if buttons[pygame.K_SPACE]:
+        pygame.draw.rect(screen, (0, 0, 255), (WIDTH - 130, 40, int(hero.manna), 10))
+        if buttons[pygame.K_SPACE] and (self.manna >= 10):
             self.is_shouting = True
         else:
             self.is_shouting = False
-        if buttons[pygame.K_UP]:  # and not pygame.sprite.collide_mask(self, walls):
-=======
+        if buttons[pygame.K_e] and (self.manna >= 5):
+            self.is_kicking = True
+        else:
+            self.is_kicking = False
         if buttons[pygame.K_UP]:
->>>>>>> 42b83b66d7583c74ab2a65174e17c83e512c3fb5
             self.vector = 3
             self.rect.y -= self.v
             if  pygame.sprite.collide_mask(self, walls):
@@ -305,7 +319,15 @@
                 self.stand = False
 
         if self.frame_count % 5 == 0:
-            if not self.is_shouting:
+            hero.change_manna(0.2)
+            for i in manna_upper_real_coordinates:
+                if ((hero.realx) - (i[0])) ** 2 + ((hero.realy) - (i[1])) ** 2 < 10000:
+                    hero.change_manna(0.5)
+            for i in health_upper_real_coordinates:
+                if ((hero.realx) - (i[0])) ** 2 + ((hero.realy) - (i[1])) ** 2 < 10000:
+                    hero.change_health(0.5)
+
+            if not self.is_shouting and not self.is_kicking:
                 if not self.stand:
                     if self.vector_left_right == 1:
                         self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)
@@ -320,7 +342,8 @@
                     if self.vector_left_right == 2:
                         self.cur_frame = (self.cur_frame + 1) % len(self.frames_left)
                         self.image = self.frames_stand_left[self.cur_frame]
-            else:
+            elif self.is_shouting and not self.is_kicking:
+                hero.change_manna(-10)
                 if not self.stand:
                     if self.vector_left_right == 1:
                         self.cur_frame = (self.cur_frame + 1) % len(self.frames_right_shouting)
@@ -328,14 +351,29 @@
                     if self.vector_left_right == 2:
                         self.cur_frame = (self.cur_frame + 1) % len(self.frames_left_shouting)
                         self.image = self.frames_left_shouting[self.cur_frame]
+                elif self.stand:
+                    if self.vector_left_right == 1:
+                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)
+                        self.image = self.frames_stand_right_shouting[self.cur_frame]
+                    if self.vector_left_right == 2:
+                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_left)
+                        self.image = self.frames_stand_left_shouting[self.cur_frame]
+            else:
+                hero.change_manna(-5)
+                if not self.stand:
+                    if self.vector_left_right == 1:
+                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_right_kicking)
+                        self.image = self.frames_right_kicking[self.cur_frame]
+                    if self.vector_left_right == 2:
+                        self.cur_frame = (self.cur_frame + 1) % len(self.frames_left_kicking)
+                        self.image = self.frames_left_kicking[self.cur_frame]
                 else:
                     if self.vector_left_right == 1:
                         self.cur_frame = (self.cur_frame + 1) % len(self.frames_right)
-                        self.image = self.frames_stand_right[self.cur_frame]
+                        self.image = self.frames_stand_right_kick[self.cur_frame]
                     if self.vector_left_right == 2:
                         self.cur_frame = (self.cur_frame + 1) % len(self.frames_left)
-                        self.image = self.frames_stand_left[self.cur_frame]
-
+                        self.image = self.frames_stand_left_kick[self.cur_frame]
 
 
         if not (buttons[pygame.K_UP] or buttons[pygame.K_DOWN] or buttons[pygame.K_RIGHT] or buttons[pygame.K_LEFT]):
@@ -343,11 +381,22 @@
         self.frame_count += 1
 
     def fire(self):
-        FireBall(self.rect.x, self.rect.y, self.vector, all_sprites, fireballs)
+        FireBall(self.rect.x+20, self.rect.y-5, self.vector, all_sprites, fireballs)
     def change_health(self, value):
-        self.health += value
-        if self.health < 0:
+        if (self.health + value <= 100) and (self.health + value >= 0):
+            self.health += value
+        elif (self.health + value <= 0):
             self.health = 0
+        else:
+            self.health = 100
+    def change_manna(self,value):
+        if (self.manna + value<= 100) and (self.manna + value >= 0):
+            self.manna += value
+        elif self.manna + value <= 0:
+            self.manna = 0
+        else:
+            self.manna = 100
+
 
 
 class Walls(pygame.sprite.Sprite):
@@ -366,6 +415,16 @@
     def update(self, *args):
         # камон, это же стены
         pass
+class Tree(pygame.sprite.Sprite):
+    def __init__(self, tree_image, coords, *groups):
+        super().__init__(*groups)
+        self.image = tree_image
+        self.rect = self.image.get_rect()
+        self.rect.x = coords[0]
+        self.rect.y = coords[1]
+    def update(self, *args):
+        # камон, это же стены(деревья)
+        pass
 
 
 class Floor(pygame.sprite.Sprite):
@@ -395,6 +454,9 @@
     def apply(self, obj):
         obj.rect.x += self.dx
         obj.rect.y += self.dy
+        if obj is hero:
+            hero.realx -= self.dx
+            hero.realy -= self.dy
 
     # позиционировать камеру на объекте target
     def update(self, *args):
@@ -420,6 +482,7 @@
 all_sprites = pygame.sprite.Group()
 enemy_group = pygame.sprite.Group()
 fireballs = pygame.sprite.Group()
+objects = pygame.sprite.Group()
 
 k = 0
 fps = 60
@@ -518,16 +581,50 @@
                              load_image("bomzh_vprapo_shout2.png"), load_image("bomzh_vprapo_shout3.png"),
                              load_image("bomzh_vprapo_shout4.png"), load_image("bomzh_vprapo_shout5.png"),
                              load_image("bomzh_vprapo_shout6.png"),
-                             load_image("bomzh_vprapo_shout7.png")], (800, 300),
+                             load_image("bomzh_vprapo_shout7.png")],
+                            [load_image("bomzh_vlevo_kick0.png"), load_image("bomzh_vlevo_kick1.png"),
+                             load_image("bomzh_vlevo_kick2.png"), load_image("bomzh_vlevo_kick3.png"),
+                             load_image("bomzh_vlevo_kick4.png"), load_image("bomzh_vlevo_kick5.png"),
+                             load_image("bomzh_vlevo_kick6.png"), load_image("bomzh_vlevo_kick7.png")],
+                            [load_image("bomzh_vprapo_kick0.png"), load_image("bomzh_vprapo_kick1.png"),
+                             load_image("bomzh_vprapo_kick2.png"), load_image("bomzh_vprapo_kick3.png"),
+                             load_image("bomzh_vprapo_kick4.png"), load_image("bomzh_vprapo_kick5.png"),
+                             load_image("bomzh_vprapo_kick6.png"),
+                             load_image("bomzh_vprapo_kick7.png")],
+                            [load_image("stait_vlevo_shout0.png"), load_image("stait_vlevo_shout1.png"),
+                             load_image("stait_vlevo_shout2.png"), load_image("stait_vlevo_shout3.png"),
+                             load_image("stait_vlevo_shout4.png"), load_image("stait_vlevo_shout5.png"),
+                             load_image("stait_vlevo_shout6.png"), load_image("stait_vlevo_shout7.png"),
+                             load_image("stait_vlevo_shout8.png")],
+                            [load_image("stait_vpravo_shout0.png"), load_image("stait_vpravo_shout1.png"),
+                             load_image("stait_vpravo_shout2.png"), load_image("stait_vpravo_shout3.png"),
+                             load_image("stait_vpravo_shout4.png"), load_image("stait_vpravo_shout5.png"),
+                             load_image("stait_vpravo_shout6.png"), load_image("stait_vpravo_shout7.png"),
+                             load_image("stait_vpravo_shout8.png")],
+                            [load_image("stait_vlevo_kick0.png"), load_image("stait_vlevo_kick1.png"),
+                             load_image("stait_vlevo_kick2.png"), load_image("stait_vlevo_kick3.png"),
+                             load_image("stait_vlevo_kick4.png"), load_image("stait_vlevo_kick5.png"),
+                             load_image("stait_vlevo_kick6.png"), load_image("stait_vlevo_kick7.png"),
+                             load_image("stait_vlevo_kick8.png")],
+                            [load_image("stait_vpravo_kick0.png"), load_image("stait_vpravo_kick1.png"),
+                             load_image("stait_vpravo_kick2.png"), load_image("stait_vpravo_kick3.png"),
+                             load_image("stait_vpravo_kick4.png"), load_image("stait_vpravo_kick5.png"),
+                             load_image("stait_vpravo_kick6.png"), load_image("stait_vpravo_kick7.png"),
+                             load_image("stait_vpravo_kick8.png")],
+                            (800, 300),
                             all_sprites)
             for i in range(5):
                 Enemy(load_image("bloody_zombie-NESW.png"), 3, 4, all_sprites, enemy_group)
+            for i in manna_upper_coordinates:
+                Tree(pygame.transform.scale(load_image("manna_upper.png"), (234, 275)), i, all_sprites, objects)
+            for i in health_upper_coordinates:
+                Tree(pygame.transform.scale(load_image("health_upper.png"), (177, 273)), i, all_sprites, objects)
         for event in pygame.event.get():
             if event.type == pygame.QUIT:
                 lvl = False
                 gamerun = False
             if event.type == pygame.KEYDOWN:
-                if event.key == pygame.K_SPACE:
+                if (event.key == pygame.K_SPACE and hero.manna >= 10):
                     hero.fire()
 
         screen.fill((0, 0, 0))
@@ -552,5 +649,4 @@
     pygame.display.update()
     pygame.display.flip()
     clock.tick(fps)
-pygame.quit()
-#############
\ No newline at end of file
+pygame.quit()
\ No newline at end of file
